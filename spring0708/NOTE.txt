[spring 07]

1. 프로젝트 생성 

   1) Spring Legacy Project 
      name : 프로젝트명 작성 
      Spring MVC... 선택 > next > 기본패키지3단계로 작성 ex) com.member.controller > finish!
      설정정보파일들 있는지 폴더들 열어 확인 

   2) pom.xml 세팅 
      java-version   : 11
      spring version  : 5.1.5
      그 외 lombok 등 추가/수정 
      
   3) 프로젝트 우클릭 > Maven > Update project... 선택해서 프로젝트 update 

      > MavenRepository, JRE 등등 버전 변경된것 확인 
   
   4) 서버 우클릭 > Add and Remove... > 프로젝트 서버에 올리기 

   5) 프로젝트 우클릭 > Properties 
      > Java Build Path > Libraries 탭 > JRE, Maven, Tomcat 있는지 확인 
         * Tomcat 없으면, classpath 선택하고 Add Library 
         > Runtime Server.. > Tomcat 9.0..선택 > finish > 하단에 Apply! 
      > Project Facets > Java 11 확인, 
             > 오른쪽 Runtime 탭 > Tomcat... 체크 > 하단에 Apply and Close! 

   6) 서버 더블클릭 > 하단에 Modules 탭 > 
      올라간 프로젝트 확인하고, Path '/'로 수정 
      수정은 프로젝트 선택 > Edit 버튼 > Path에 '/controller' -> '/' 로 변경하고 확인 
      > 열린 톰캣세팅 파일 저장 > 서버 재부팅   
         
   7) 서버 스타트 된 상태에서, 브라우저 열어 http://localhost:8080/ 요청해서 Hello World 찍히는지 확인.

2. 회원 가입

	1) src/main/java 패키지 구성
		com.member.controller	: 컨트롤러 클래스
		com.member.service	: 비즈니스 로직 처리하는 Service 파일들
		com.member.domain	: DTO,VO
		com.member.mapper	: Mapper 인터페이스
	
	src/main/resources 패키지 구성
		com > member > mapper 폴더 : Mapper.xml

	webapp
		resources
			css 폴더	: .css
			js 폴더	: .js
			imgs폴더	: 이미지들
		WEB-INF
			views
				member폴더 : .jsp 파일들

	2) 경로와 필요한 페이지

		URL		Method	설명			jsp 페이지
		-------------------------------------------------------------------------------------
		/member/main	GET	메인페이지		main.jsp
		/member/signup	GET	회원가입 폼 페이지		signup.jsp
		/member/signup	POST	회원가입 처리		(signupPro.jsp)
		/member/login	GET	로그인 폼 페이지		login.jsp
		/member/login	POST	로그인 처리		(loginPro.jsp)
		/member/mypage	GET	내 정보 페이지		mypage.jsp
		/member/modify	GET	회원정보 수정 폼 페이지	modify.jsp
		/member/modify	POST	회원정보 수정 처리		(modifyPro.jsp)
		/member/delete	GET	회원 탈퇴 폼 페이지	delete.jsp
		/member/delete	POST	회원 탈퇴 처리		(deletePro.jsp)

	3) DB 테이블 : springMember
		signup.jsp 참고

	4) Service 
		MemberService : 인터페이스
		MemberServiceImpl : 구현클래스 (@Service)
	5) DAO (생략)
		MemberRepository	: 인터페이스
		MemberRepositoryImpl : 구현클래스 (@Repository)
	6) Mapper
		MemberMapper : 인터페이스
		MemberMapper : xml파일

3. Session 세션
	클라이언트와 웹 서버간의 상태를 지속적으로 유지하는 방법
	쿠키와 세션의 차이점은 어디에 정보를 저장하느냐의 차이
	
	쿠키 : 웹 브라우저에 사용자 정보 저장 (클라이언트 측 사용자 정보 보관소)
	세션 : 웹 서버 쪽의 웹 컨테이너에 정보 저장 (서버측 사용자 정보 보관소)

	서버는 세션을 사용해서 클라이언트 상태를 유지할 수 있기 때문에, 주로 로그인한 사용자 정보를 유지하기 위한 목적으로 세션을 사용한다. 세션은 웹 서버에서만 접근이 가능하므로 브라우저와 서버의 상태 유지가 훨씬 안정적이고 보안유지에 더 유리하며 데이터 저장하는데 한계가 없다. 간혹, 웹 브라우저에서 쿠키를 지원하지 않거나 강제적으로 쿠키를 막으면 세션은 상관없이 사용가능. 하지만, 세션은 여러 서버에서 공유할 수 없다. www.daum.net, mail.daum.net

	웹 컨테이너에는 세션 컨테이너가 존재하며, 기본적으로 한 웹브라우저마다 한 세션을 생성하여, 사용자의 구분단위가 됨.
	한 브라우저에서 여러 jsp페이지를 보여줘도 하나의 세션을 사용, 같은 페이지라도 븝라우저에 따라 다른 세션을 사용.
	세션을 사용하면 클라이언트(브라우저)가 웹 서버의 세션에 의해 가상으로 연결된 상태가 되며, 웹 브라우저를 닫기 전까지 웹 페이지를 이동하더라도 사용자의 정보가 웹서버에 보관되어 있어 사용자 정보를 잃지 않는다.

	로그인 상태유지 -> 세션에 속성을 하나 추가해줄 것. (k,v)형태로 추가
4. 쿠키 Cookie
	쿠키는 웹 브라우저가 보관하는 데이터
	웹 사이트에 접속할 때 생성되는 정보를 담은 임시파일
	일반적으로 4KB이하 크기로 생성. 1 바이트 문자로 현재 모든 상태를 전산에 기록

	쿠키는 비연결지향인 HTTP의 특징이자 약점을 보완하기 위해 사용된다.
	클라이언트의 정보를 클라이언트의 일정한 폴더에 저장하기 때문에 서버의 부하를 줄일 수 있다는 장점이 있고, 자동 로그인 기능으로 사용하면 클라이언트 요청마다 로그인할 필요없이 사용가능한 것이 장점이다.

	* 쿠키의 2가지 방식
	파일 쿠키 : 실제 파일로 남겨서 저장하는 방식, 보안에 취약
	웹 쿠키	: 브라우저가 관리, 브라우저 종료되면 쿠키가 삭제됨. 저장하실래요? > 네 하면 그 부분만 종료되더라도 삭제되지 않게 구성.
	* 쿠키는 해당 클라이언트의 브라우저에 정보가 저장되는데, 아이디, PW, 브라우저정보, ip, 시간 등이 저장된다.
	
	* 쿠키의 제약사항
		문자열 데이터만 가능
		4kb 이상의 공간을 차지함
		클라이언트에 300개 까지, 도메인당 20개 까지 저장 가능, 한도 넘으면 최근 사용되지 않은 쿠키부터 자동 삭제

	1) 동작 방식
		쿠키는 웹 서버와 웹 브라우저 양쪽에서 생성가능
		
		브라우저					웹 서버
		[쿠키저장소]
		----------------------------------------------------------------
		1 요청		--------------->		
				<---------------   		응답
				     ( 쿠키 )
		----------------------------------------------------------------
		2 [쿠키저장소]
		   쿠키 저장
		----------------------------------------------------------------
		3 요청		--------------->		
				     ( 쿠키 )	           (쿠키확인)
				<---------------   		응답
		----------------------------------------------------------------

	2) 쿠키의 구성
		name 	쿠키 이름	
		value 	쿠키 저장할 값
		maxAge 	유효시간
		domain 	도메인 	: 쿠키가 전송되어야 하는 서버의 도메인 ( 지정 안하면 생성된 서버로만 전송)
				  www.naver.com, naver.com
				  www.google.com
		path 	경로	: 쿠키가 전송되어야 하는 웹 서버의 특정 URL 지정 (지정 안하면 생성한 페이지의 경로로만 전송)
				  지정한 경로와 그 하위 경로로만 쿠키가 전송됨
				  member(root)
					  abc
					  def
						 xyz

	3) 쿠키 생성
		쿠키를 사용하려면 먼저 Cookie 클래스로 쿠키 객체를 생성해야 함. 쿠키에는 각각 웹 브라우저를 판별할 수 있는 정보가 포함되어 있음.
		서버 응답시, response 객체에 실려 사용자 브라우저에 저장됨.
		정보 전달 방식은 Map(key,value)형태이다.
		[ 쿠키 객체 생성 ]
			Cookie cookie = new Cookie(String name, String value); // 값은 가급적 영어와 숫자로
			cookie.setMaxAge(초단위수);
			cookie.setDomain("도메인");
			cookie.setPath("페이지경로");
		[response 객체에 쿠키 추가 ] <-- 중요! 까먹지 말기
			response.addCookie(cookie);

		* Cookie method
			String getName()			: 쿠키 이름 리턴
			String getValue()			: 쿠키 값 리턴
			void setValue(String value)		: 쿠키 값 지정
			void setDomain(String pattern)	: 쿠키가 전송될 서버의 도메인을 지정
			String getDomain()			: 쿠키 도메인 리턴
			void setPath(String url)		: 쿠키를 전송할 경로 지정
			String getPath()			: 경로 리턴
			void setMaxAge(int expiry)		: 쿠키 유효시간 초단위로 지정.
							  음수 입력할 경우, 웹 브라우저를 닫을 떄 쿠키가 함께 삭제
			int getMaxAge()			: 쿠키의 유효시간 리턴

		* 서버에서 쿠키 읽어오기
			저장된 모든 쿠키 객체를 가져오려면 request 객체에서 꺼내야함
		
			Cookie[]		request.getCookies()
	
			-> 배열에서 내가 찾고 싶은 쿠키이름을 검색 getName(), getValue() 메서드 이용해서 활용
	
	5) 쿠키 삭제
		쿠키는 삭제하는 기능이 없다
		쿠키의 유효시간을 만료하면 삭제됨.
		-> 지울 쿠키 사용자가 보낸 쿠키들 중에서 찾아서
		    cookie.setMaxAge(0);
		    response.addCookie(cookie);

	페이지 	   상황					    처리 기능	   이동할 페이지
	--------------------------------------------------------------------------------------------------------------
	로그인 폼 : 비로그인 (session.memId == null) 
			쿠키 있다 -> 쿠키 꺼내서 로그인 처리 -> session, cookie	-> main
			쿠키 없다 -------------------------------------------------------> login Form
	로그인 	: 비로그인 자동 X (auto ==null) -------------------> session ----------> loginPro
		 비로그인 자동 O (auto == "1") -------------------> session, cookie	-> loginPro

	main	: 로그인		
			쿠키 있다 -> cookie 갱신	-------------> cookie ----------> main
			쿠키 없다 -------------------------------------------------------> main
		  비로그인	
			쿠키 있음-> 쿠키 꺼내서 로그인 처리 	-> session, cookie -> main
			쿠키 없음-> x	---------------------------------------------> main
	--------------------------------------------------------------------------------------------------------------

	* 로그인 	  : session에 memId 존재
	  비로그인 : session에 memId 없음

+) 프로젝트
	1) 기간 : 4/8~4/29
		~ 4 / 28 : 발표 준비 완료
		4/29 발표
	2) 발표용 PPT/ 작업
		
		1. 프로젝트 제목
		2. 목차
		3. 주제 선정 이유 (목적, 사유)
		4. 구현 목표
			- 벤치 마킹(2~3) : 사이트 장/단점 분석 -> 개선점 -> 목표
			- 개발할 사이트 차별성 정확히 명시
			- 사이트 맵 : 기본 구조 + 관리자 모드
			- 일정 : 프로젝트 진행 일정
		4-1. wireframe
		5. 요구사항 정의서
		6. Usecase diagram ( 화면 흐름도) 사용자 별
		7. 테이블 정의서
		8. ER-diagram
		9. 개발환경
		10. 주요코드 : 발표용 3~4
		    	      개인 포트폴리오는 본인이 한 부분
			실행결과 + 코드



