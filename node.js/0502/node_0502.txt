박문석 
- 수업: node.js, react-native, go
- 선수 학습: javascript(es6-ECMA 2015), HTML, CSS -> TypeScript(선택)
- 010-3790-1997, ggangpae1@gmail.com, ggangpae1.tistory.com

**Node 개요
1.Node 의 등장 배경
=>웹의 대중화
=>웹 브라우저에 대해서 친숙해지고 웹 브라우저 안에서 모든 작업을 하기를 원함

=>웹 클라이언트 & 서버 개발

웹 브라우저 출력(HTML, CSS, JavaScript)

동적인 내용을 출력하도록 하기 위한 서버(데이터 저장은 RDBMS-Oracle, MySQL, MSSQL, Postgress SQL 등, 동적인 처리는 VB 기반의 ASP, PHP, Java 기반의 JSP, Ruby 등)

=>스마트 디바이스의 등장
개발자가 아닌 사람들이 애플리케이션 개발에 동참

=>Mongo DB, Express, Angular(React), Node - MEAN(MERN)
서버 와 클라이언트의 개발을 하나의 언어만 배워서 구현
Mongo DB(NoSQL - BSON), Node(Java Script를 이용해서 Application 개발), Express(Node를 이용해서 웹 서버를 쉽게 구축), Angular(React, Vue 등)

2.개발 환경 구축
1)node.js 설치
=>https://nodejs.org 에서 다운로드 받아서 설치
=>node의 경우는 안정적인 버전 뒤에 LTS 라는 단어가 붙으며 홀수 버전은 시험판이라서 없습니다.
=>설치 확인
cmd(shell, terminal)에서 node 라고 입력했을 때 버전 정보 와 프로프트가 > 로 바뀌면 됩니다.

2)node.js를 코딩하고 해석하고 실행하기 위한 IDE 가 필요
=>텍스트 편집기 와 node.js 만 설치되어 있어도 가능
=>저는 수업 시간에 VS Code 사용
=>다운로드:https://code.visualstudio.com/download

3.프로젝트 생성 및 실행
1)프로젝트에서 사용할 디렉토리를 생성

2)vscode를 실행해서 생성한 디렉토리 열기

3)터미널에 npm init 이라는 명령을 수행하고 옵션을 설정
=>터미널 열기: [View] - [Terminal]

=>옵션을 성공적으로 수행하면 package.json(maven 의 pom.xml 파일 gradle의 build.gradle 파일 과 유사 - 프로젝트의 의존성을 설정하는 파일) 파일이 프로젝트에 생성

4)프로젝트에 js 파일을 생성(index.js)하고 작성
console.log('Hello Node.js')

5)실행
=>터미널에서 node 파일명
실행을 한 후 터미널을 확인해보면 console.log에 작성한 내용이 출력됩니다.

4.모듈 프로그래밍 - 나누어서 프로그래밍
=>파일을 나누어서 작성하는 방식
=>하나의 파일에 모두 작성해도 실행은 되지만 이렇게 하면 가독성이 떨어지고 유지보수가 어려워집니다.
이런 문제점을 해결하기 위해서 동일한 역할을 수행하는 내용을 파일 별로 나누어서 프로그래밍 합니다.
발전된 형태가 객체 지향 프로그래밍 입니다.
자바스크립트에서는 클래스를 만들 수 없고 TypeScript를 이용하면 클래스를 생성할 수 있습니다.

1)모듈 작성
=>자바스크립트 파일을 만들고 다른 곳에서 사용 가능한 변수나 함수를 module.exports = { } 안에 나열

2)모듈 사용
변수명이나 함수명 나열 = require('모듈 이름')

3)실습
=>var.js 파일로 다른 곳에서 사용할 변수를 생성하고 내보내기
const odd = '홀수'
const even = '짝수'

module.exports = {
    odd, even
}

=>기존에 만들어 두었던 index.js 파일을 수정
//현재 디렉토리의 var.js 파일에서 exports 된 데이터를
//odd 와 even에 할당
const {odd, even} = require('./var')

console.log(odd)
console.log(even)

=>터미널에 node index.js를 실행하고 변수에 저장한 데이터가 출력되는지 확인

5.node 내장 객체(Built-in Object)
1)global 객체
=>노드에 존재하는 전역 객체
=>노드 프로젝트에 존재하는 모든 자바스크립트 파일에서 사용 가능한 객체(공유)

2)공유 실습
=>globalA.js 파일을 만들고 작성
module.exports = () => {
    global.message = '안녕하세요 반갑습니다.'
}

=>index.js 파일에 작성
const f = require('./globalA')
f() //globalA에서 exports 해준 함수를 실행
console.log(global.message);

=>node index.js 를 수행하고 안녕하세요 반갑습니다 출력되는지 확인

3)console 객체
=>console.time(메시지) 와 cosole.timeEnd(메시지): 동일한 메시지를 기반으로 걸린 시간을 측정
웹 서버 만들 때는 종종 출력을 해봐야 합니다.

=>console.error(메시지): 메시지를 에러 형태로 로깅
=>console.log(메시지): 메시지를 로깅
=>console.dir(객체, 옵션): 객체 로깅에 사용하는데 옵션에 color 나 depth 같은 것들을 설정할 수 있음
=>console.trace(메시지): 호출 스택(stack - LIFO(Last In First Out)) 로깅
=>console.table(배열): 테이블 형식으로 로깅

=>여기있는 모든 함수 호출 구문은 배포할 때는 삭제해야 합니다.
개발과정에서만 사용합니다.

로그(메시지)를 기록할 때 콘솔에 기록하는 것은 개발 과정에서 에러를 찾기 위한 목적이고 파일이나 데이터베이스에 기록하는 것은 유지보수나 학습에 이용하기 위해서입니다. 

4)index.js 파일에 아래 내용을 추가하고 실행 한 후 확인
console.error(global.message);
//로그가 표로 출력됩니다.
console.table([global.message]);

console.time('시간 측정');
for(var i=0; i<100000000; i=i+1){}
console.timeEnd('시간 측정');

5)timer
=>일정한 주기를 가지고 수행하는 동작을 만들 때 사용
=>생성: timer 객체를 리턴
setTimeout(콜백 함수, 밀리초): 밀리 초이후 콜백 함수를 1번만 수행
setInterval(콜백 함수, 밀리초): 밀리 초 마다 콜백 함수를 계속 수행
setImmediate(콜백 함수): 바로 수행

=>제거
clearTimeout(timer객체)
clearInterval(timer객체)
clearImmediate(timer객체)

6)타이머 실습 - index.js 하단에 추가하고 다시 실행 한 후 확인
var ar = ['Karina', 'Wintor', 'RingRing', 'Giselle'];
setInterval(()=>{
    console.log(ar[i % ar.length])
    i = i + 1
}, 1000)

=>이미지 애니메이션 만드는 연습을 해보고자 하면 텍스트로 image1.png, image2.png, image3.png 를 번갈아 가면서
출력하도록 작성을 해보면 됩니다.

7)경로 관련
=>__filename: 현재 파일 경로
=>__dirname: 현재 디렉토리 경로

8)require 함수
=>모듈을 추출하는 함수
=>다른 모듈에서 exports 하는 데이터를 받아오고자 할 때 사용하는 함수
이름 = require('모듈 이름')
=>모듈에서 여러 개를 exports 하는 경우는 { } 안에 이름을 나열해야 합니다.
=>require.cache를 호출하면 require로 호출한 모듈에 대한 캐싱 정보를 저장

9)module.exports
=>모듈 내의 내용을 다른 모듈이 사용할 수 있도록 해주는 속성

10)this
=>함수 내부에서는 global 객체

11)process
=>현재 실행 중인 노드 프로세스에 대한 정보를 저장한 객체
=>process.속성이름 의 형태로 사용
=>process.nextTick(콜백함수): 다른 함수보다 콜백함수를 먼저 수행
CallBack: 이벤트를 만났을 때 호출되는 함수
=>process.exit(코드): 노드 프로세스가 종료
서버에서는 거의 사용하지 않음
특정 조건을 만족하지 않았을 때 프로세스를 종료하는 용도로 사용하는데 이 경우는 대부분 컴퓨터 애플리케이션에서 보안이나 실행 조건을 설정하고자 할 때 사용

6.node 의 내장 모듈
1)os
=>운영체제 관련 정보를 저장한 객체
스레드의 개수를 설정할 때 코어의 개수 정도로 설정하면 효율적인 스레드의 개수를 선택하는데 도움이 됩니다.

2)path
=>경로를 쉽게 조작할 수 있도록 해주는 모듈
path.sep: 디렉토리 구분자
path.join(경로를 나열): 경로를 모아서 하나의 문자열로 리턴

3)url
=>url을 쉽게 조작할 수 있도록 도와주는 모듈
=>parse 함수에 url을 대입하면 url을 분해해주고 분해된 url을 format 함수에 대입하면 합쳐진 URL을 리턴

4)searchParams
=>queryString 을 쉽게 사용할 수 있도록 도와주는 URL의 내부 객체
=>문자열에는 없고 URL 객체 안에 존재
=>keys(): 모든 파라미터 이름을 리턴하는 iterator를 반환
=>values(): 모든 값을 리턴하는 iterator를 반환

5)querystring 모듈
=>url에서 query 부분을 편리하게 사용하기 위해서 내장한 모듈
=>json 파싱할 때와 함수 이름이 동일
=>parse 함수를 이용하면 파싱해서 javascript 객체로 변환
=>stringify 함수를 이용하면 javascript 객체를 queryString으로 변환

6)실습 - js 파일에 작성하고 실행
//문제 - url에서 query 부분만 추출해서 자바스크립트 객체로 변환
addr = 'https://cyberadam.cafe24.com/item/detail?itemid=1'

//문자열로 만들어진 URL을 각각의 부분으로 분할
//url 모듈의 parse 라는 함수
const url = require('url')
const parsedUrl = url.parse(addr)

//분할된 url 의 query라는 속성을 호출하면 query 부분만 별도의 문자열로 추출
console.log(parsedUrl.query)

//queryString 문자열을 자바스크립트 객체로 변환해주는 함수는
//querystring 모듈의 parse 라는 함수
const querystring = require('querystring')
const param = querystring.parse(parsedUrl.query)
console.log(param.itemid)

7)crypyto 모듈
=>암호화 모듈

=>암호화 방식
 - 단방향 암호화: 암호화한 후 평문 과 암호화 한 문장을 비교할 수는 있지만 암호화 한 문장을 가지고 평문을 만들어 낼 수 는 없는 방식
   해시 방식으로 만들어내는 경우가 많은데 해시 방식은 문자열을 고정된 길이의 다른 문자열로 만드는 방식
   비밀번호를 이런 방식으로 저장합니다.

   createHash(알고리즘): 알고리즘 설정
      알고리즘에는 md5, sha1, sha256, sha512 등이 있는데 현재는 sha512를 사용하는데 나중에는 새로운 알고리즘이 추가될 것 입니다. 
      
   update(문자열): 변환할 문자열을 설정

   digest(인코딩방식): 인코딩할 알고리즘을 설정하는데 base64, hex, latin1 등이 사용됨

 - 단방향 암호화 실습
//암호화 모듈 사용
const crypto = require('crypto')

//이 방식으로 암호화를 하게되면 수많은 횟수를 반복해서
//문자열을 대입하면 원본을 찾아 낼 수 있을지도 모름
//이 때 사용하는 테이블을 레인보우 테이블이라고 합니다.
console.log(
    crypto.createHash('sha512').update('문장').digest('base64'))

//랜덤한 숫자를 적용해서 위의 작업을 수만번 반복해서 암호화

var salt;
var pw = '문장';
var pw1
crypto.randomBytes(64, (err, buf) => {
    salt = buf.toString('base64')
    crypto.pbkdf2(pw, salt, 1000000, 64, 'sha512', 
        (err, key) => {
            pw1 = key.toString('base64')

            console.log('원래 비밀번호:' + pw);
            console.log('salt:' + salt);
            console.log('변경된 비밀번호:' + pw1);
            //데이터베이스에 저장: salt 와 변경된 비밀번호
        })
});

	
   

 - 양방향 암호화: 암호화 한 후 암호화 한 문장을 가지고 평문을 만들어 낼 수 있는 방식의 암호화
   일반적으로 동일한 키를 가지고 연산을 해서 생성하는 방식을 이용합니다.
   crypto.createChiperiv(알고리즘, 키, iv)
      알고리즘은 crypto.getCiphers()를 호출하면 확인 가능
      키는 32바이트로 설정
      iv는 초기화 벡터로 16바이트로 고정

   	앞에서 만들어진 객체를 가지고 update(암호화할 문자열, 입력 인코딩, 출력 인코딩) 을 호출하면 암호화된 문장이 만들어 짐
   	입력 인코딩으로는 utf8을 그리고 출력 인코딩으로는 base64를 많이 사용
	동일한 옵션이더라도 update 함수 호출 시 문장이 매번 새로 만들어집니다.
	동일한 평문을 가지고 동일한 옵션을 적용해도 다른 문장이 만들어질 수 있습니다.
	암호화된 문장끼리 동일성 여부를 비교하면 안되고 복호화해서 비교해야합니다.

   복호화하기
   crypto.createDeciperiv(알고리즘, 키, iv)
   	앞에서 만들어진 객체를 가지고 update(암호화할 문자열, 출력 인코딩, 입력 인코딩) 을 호출하면 원래의 문장이 만들어 짐
   	입력 인코딩으로는 utf8을 그리고 출력 인코딩으로는 base64를 많이 사용

















