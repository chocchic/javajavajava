[spring02]

1. 라이브러리 추가
	1) 롬복 lombok
		https://projectlombok.org/
		lombok.jar 다운받고, 실행해서 eclipse 잡고 설치
		pom.xml에 디펜던시 추가

	2) spring-test, sevlet-api 수정, log4j 수정, junit 버전 변경

2. Controller
	@Controller : 컨트롤러 클래스라고 명시
	@RequestMapping
		메서드가 처리할 요청 경로를 지정함
		적용처 : 메서드 위 / 클래스 위
			메서드 위 : 클래스는 @Controller 어노테이션이 부착되어 있어야함.
			클래스 위 : 메서드 전에 경로 추가할 때 사용

		* 속성
		value="요청경로"
		method=요청방식 : RequestMethod.GET, RequestMethod.POST
	2) 컨트롤러 메서드 리턴 타입
		스프링 MVC의 구조가 기존의 상속과 인터페이스에서 어노테이션을 사용하는 방식으로 변한 이후 가장 큰 변화 중 하나는 리턴 타입이 자유로워진 것
		
		1. String 타입
			jsp를 이용하는 경우에는 jsp 파일의 경로와 파일 이름을 나타내기 위해 사용
		2. void 타입
			호출하는 URL과 동일한 이름의 jsp를 의미함
		3. VO,DTO 타입
		 	주로 JSON의 데이터를 만들어서 반환하는 용도로 사용(ajax 사용할 때, view 경로 X)
		4. ResponseEntity 타입
			응답을 해줄 때, Http 헤더 정보와 내용을 가공해서 전달해줄 때 사용
		5. Model, ModelAndView 타입
			Model로 데이터를 전달하거나, view 경로까지 같이 지정하는 경우
		6. HttpHeaders 타입
			응답에 내용없이 http 헤더 메세지만 전달하는 용도로 사용
	
3. 의존성 주입 DI Dependency Injection
	의존 : 객체와 객체간의 의존을 말한다
	ex ) A 객체에서 B 객체를 필요로 한다면? A 객체는 B 객체에 의존한다고 말할 수 있다.

	스프링에서는 이러한 의존도를 낮추기 위해서 개발자가 직접 new를 하지 않고, 설정 파일에 설정만 함으로써 프레임워크에서 알아서 생성하고(Core의 BeanFactory에서 담당) 알아서 객체를 주입(Injection)까지 해줄 수 있다.

	-> 의존성 주입 : 의존하는 객체를 직접 생성하는 대신, 의존 객체를 전달받는 방식

	1) 의존성 자동 주입
		@Autowired
		private 클래스명 변수명;

		- context.xml 파일에 해당 클래스가 <bean>으로 등록이 되어 있거나 해당 클래스가 존재하는 패키지가 component-scan 되어있고, 해당 클래스 위에 @Component, @Service, @Repository,(@Controller)가 붙어있어야함
		
		* <context:component-scan ... > 태그로 자동 객체 생성되는 어노테이션
		@Component : 스프링이 관리해야할 객체라고 표식
		@Service		: 비즈니스로 직처리하는 클래스 위에 부착
		@Repository	: DAO 역할을 하는 클래스 위에 부착
		@Controller	: 컨트롤러의 역할을 하는 클래스 위에 부착
 
 [spring03]

1. 테스트
	* TDD Test Driven Development : 테스트 주도 개발
		만들고자 하는 기능의 내용을 담고 있는 테스트 코드를 먼저 만들고, 그 테스트가 성공하도록 하는 코드를 작성하는 방법
	* 단위 테스트 Unit Test : 작은 단위의 테스트, 개발자 테스트, 프로그래머 테스트
			        하나의 관심에 집중해서 효율적으로 테스트할 많나 범위를 단위라고 본다.
	* JUnit 자바 테스트 프레임워크
		테스트 클래스 작성시 요구조건
		- 테스트 적용 메서드 public 선언
		- 리턴타입 void, 파라미터 없는 메서드
		- @Test 어노테이션

2. 스프링 빈
	스프링이 객체 생성하고, 필요한 곳에 주입하고 관리하는 객체들을 말함

	* -context.xml 에 <bean>을 이용하여 스프링 빈으로 등록
	* -context.xml에 <context:component-scan>으로 등록해서 자동 등록.
		빈으로 등록하고 싶은 클래스 위에 @Componenet, @Service, @Repository 등 ... 부착

	1) 빈 등록하는 방법 : 롬복이나 component-scan, @Autowired 등 어노테이션 사용하지 않을 경우 예시
		<bean id="빈이름" class="패키지명을 포함한 클래스 전체 경로" />
		<bean id="빈이름" class="패키지명을 포함한 클래스 전체 경로" 
			<constructor-arg /> or <constructor-arg></constructor-arg>
			<property /> or <property></property>
		</bean>
	2) <property> : 해당 변수의 set메서드 호출하여 지정한 값을 채우며 객체 생성할 때 사용
		* 속성
 			name : 해당 클래스 내의 데이터를 채울 변수 이름과 동일하게 작성
				-> name 속성값으로 채워진 변수의 set 메서드 호출
				ex) name="num" -> setNum()메서드 호출
			value : 해당 변수에 채워줄 값 지정. 기본형 숫자, 문자를 채워줄 때 속성
			ref    : 해당 변수에 채워줄 값 지정. 참조형 (bean으로 등록되어있는 다른 빈의 id값으로 채운다.)
	3) <constructor-arg> : 생성자의 매개변수 채울 때 사용하는 태그
	 	* 속성
			value	: 매개변수에 들어갈 기본형(숫자, 문자) 값 지정
			ref	: 매개변수에 들어갈 참조형 값 지정

			index	: 생성자로 보내는 매개변수의 순서 지정. 0 ~ 숫자로 매개변수 순서 지정
			type	: 값의 타입을 지정
			name	: 생성자의 매개변수 이름을 name속성으로 지정해 매핑
				 *주의할 점 : 생성자에 @ConstructorProperties 필수. 그 어노테이션의 매개변수처럼 괄호 안에 {}에 감싸서 기본생성자에 주는 매개변수의 순서에 맞춰 그 이름 값 주기

3. 파라미터 받기
	요청이 들어오는 메서드에 매개변수로 지정하면 스프링이 자동으로 바인딩해준다.

	1) 일반 매개변수 나열 (원하는 타입의)
		@RequestParam 붙혀도 되고 생략해도 됨
	2) DTO같은 객체 안에 수집(getter가 존재해야함)
	3) ArrayList 타입의 파라미터로 받기
		@RequestParam("파라미터명")으로 받기
	4) 배열로 받기
		@RequestParam 생략가능

4. 데이터를 화면(jsp파일)까지 전달
	Controller의 메서드를 작성할 때는 특별하게 Model이라는 타입을 파라미터로 지정할 수 있다.
	Model 객체는 컨트롤러에서 생성된 데이터를 담아서 JSP에 전달하는 역할을 하는 존재이다.
	이를 이용해서 JSP와 같은 View로 전달해야 하는 데이터를 담아 보낼 수 있다.
	메서드의 파라미터에 Model 타입이 지정된 경우에는 스프링은 특별하게 Model타입의 객체를 만들어서 메서드에 주입하게 된다.

	* 자바 쪽에서 view 쪽으로 데이터를 전달하는 방식 (한번의 요청에 해당하는 데이터 전달할 때)
		- 추가하기
			request.setAttribute(String name, Object value);   request.setAttribute("name", "피카츄");
			model.addAttribute(String name, Obejct value);
		- 꺼내기
			request.getAttribute(String name)

	* 자바에서 데이터 추가해주는 방법, 유효기간(사용자가 브라우저를 닫기 전까지 살아있음 -> 로그인 처리)
		- 추가하기	
			session.setAttribute(String name, Object value);
			application.setAttribute(String name, Object value); // 프로젝트 전체에 저장(잘 사용안함, 잘못쓰면위험)

		- 꺼내기
			sessiont.getAttribute(String name);
