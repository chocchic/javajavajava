	- node 탐색
		요소.parentNode		: 선택한 요소의 부모 노드
		요소.previousSibling	: 이전 형제 요소
		요소.nextSibling		: 다음 형제 요소
		요소.firstChild		: 현재 요소의 첫번째 자식 노드
		요소.lastChild		:현재 요소의 마지막 자식 노드
		요소.childNodes		: 자식 노드들
		요소.children		: 자식 노드들
	- 요소 조회
		1) 요소의 컨텐츠 조회
			textContent
			innerText
			innerHTML
		2) 요소의 속성(attribute) 접근/수정
			className	: 태그의 클래스 속성 
			classList		: add, remove, item, toggle 등의 메서드 제공 (IE 10이상)
		
			id		: 태그의 id 속성
			
			Boolean	hasAttribute(attribute)	: 속성 지정 여부 확인
			String	getAttribute(attribute)	: attribute 속성 값 가져오기
			X	setAttribute(attribute, value)	: attribute 속성에 value 값으로 속성 세팅
			X	removeAttribute(attribute)	: attribute 속성 삭제
	- DOM 조작
		1. 요소 노드 생성			: createElement(tagName)
		2. 텍스트 노트 생성		: createTextNode(text)
						(생략하면 컨텐츠가 비어있는 요소)
		3. 생성된 요소를 DOM에 추가	: appendChild(node)
						(삭제는 removeChild(node)

		* insertBefore(추가할 요소, 위치)

	- classList 메서드
		classList.메서드()

		add("클래스속성값")	: class 속성값 추가
		remove("클래스속성값")	: class 속성값 삭제
		toggle("클래스속성값", 조건)	: 조건은 옵션, class 속성값 토글(있으면 없게, 없으면 있게)
		item(idx)			: idx를 이용해 클래스값 꺼내기
		replace("oldVal", "newVal")	: 존재하는 이전 클래스를 새 클래스로 교체
		contains("클래스속성값")	: 클래스 속성값이 존재하는지 여부

	- style
		요소.style.css속성 = "값";

21. 객체 정의
	객체는 객체 리터럴과 생성자함수 두가지 방법으로 생성할 수 있다. (class 문법)
	
	1) 객체 리터럴
		객체 : 이름과 값을 한쌍으로 묶은 데이터들을 여러개 모은 것.
			연관 배열 또는 사전이라고도 부름
		- 객체 생성
			var 참조변수 = { ... };   // 빈 객체 생성
			var card1 = { shape : "heart", number : "A"};
			var card1 = { "shape" : "heart", "number" : "A"};

			* 프로퍼티 : 객체에 포함된 데이터 하나(이름과 값의 쌍)을 가르킴
			* 프로퍼티 값을 읽거나 수정할 때에는 점(.)연산자 또는 대괄호([]) 연산자 사용
			  식별자가 string형인 경우에만 대괄호 연산자 사용 가능
				card1.shape -> "heart"
				card2.shape -> "heart"
				card2["shape"] -> "heart"
			
				card1.color --> undefined
			- 프로퍼티 추가, 삭제
				추가 : 없는 프로퍼티 이름에 값 대입
				삭제 : delete 연산자 사용

			- in 연산자 : 프로퍼티 존재 여부 확인
				"프로퍼티명" in 참조변수
			- 객체 메서드
				함수를 객체의 프로퍼티로 담고 있을 때 메서드라고 표현
				객체 밖 == 전역/지역 함수
				객체 안 == 메서드

				var 참조변수 = {
					프로퍼티명:값,			// 일반 데이터
					프로퍼티명:[],			// 배열
					프로퍼티명: new Number(),		// 객체
					프로퍼티명:function(매개변수 ... ) {	// 함수
							//코드 작성
							return 값;
						},
					......
				};
				* const로 선언시 프로퍼티명은 수정이 불가능하지만 대응되는 값은 수정이 가능하다.	
	2) 객체 생성자로 정의
		1. 생성자 정의
			function 생성자명(매개변수, ...) {
				// 코드
			}
			// 생성자명은 첫글자 대문자로 정의
			
			// 리터럴
			var card = { shape : "하트", number : "A" };
			
			// 함수로 생성
			function Card(){
				this.shape = "하트"; this.number = "A";
				fuction() { ... };

			}
			var card = new Card();

			card.shape -> "하트"
			card.number -> "A"
			card.메서드명()

	3) class : ES6
		class 클래스명 {
			// 생성자
			constructor() {
				this.name = "hello"; // 프로퍼티 추가
			}
		}
		* 다른 클래스를 상속 받을 수 있다. 부모클래스에도 생성자가 있어야 오류 안남
	4) 프로토타입 prototype
		메모리 절약을 위한 방법 중 하나
		공유해서 사용할 것들을 prototype으로 만들어 두면 메모리를 효율적으로 사용 가능하다.
		나가서 상속관계까지 만들어줄 수 있다.

		[ 기존 방법 ]
			객체 생성자 함수
				|
			----------------------
			|	|	|
		       객체생성 객체생성 객체생성
			|	|	|
		        메서드     메서드    메서드

		[ prototype 함수 ]
			객체 생성자 함수
				|
			prototype 메서드
				|
			-----------------------
			|	|	|
		       객체생성 객체생성 객체생성

			function Perrson() { // 함수		// Person.prototype Object
				this.age = 1;			age, name
				this.name = "str";
			}
			위 코드로 아래 두개가 생성된다.
			< function Person() {} >	< Person Prototype Object >
			   prototype			constructor
							__proto__
			__proto__ -> object를 상속받는 듯한 효과를 받게 해줌
			
			let pika = new Person(); // 2개
			let lai = new Person();  // 2개
	
			* Prototype = Prototype Link + Prototype Object
			1) Prototype Object
				let obj = new Person();
				let obj = {}; // = new Object();

			2) Prototype Link
				__proto__ : 객체가 생성될 때 조상이 되는 Prototype Object 가르킴
				obj는 Person함수로 생성되었으니 Person Prototype Object를 가르키고 Person Prototype Object가 가진 __proto__는 Object 객체를 가르킴(Object가 객체의 조상)

22. 화살표 함수 Arrow Function
	
	// 매개변수 지정 방법
	() => { ... } // 매개변수 0개
	param => { ... } // 매개변수 1개, 소괄호 생략 가능
	(param1, param2) => { ... } // 매개변수 여러개

	// 함수 구현부 지정
	x => { return x * x }
	x => x * x		// 구현부 명령이 한 줄의 구문이면 중괄호 생략 가능
				// 리턴은 리턴 키워드 생략 가능
	() => { return { a : 10 }; }
	() => ({ a : 10 })		// 객체 리턴 시 중괄호 소괄호로 묶어서 사용
	
	() => {
		if() ...
		for() ...
		return x * x;
	};

23. event 이벤트
	이벤트 : 웹 브라우저 상에서 어떤 상황
		ex) 버튼 클릭했을 때, 페이지가 로드 됐을 때, ...
	이벤트 핸들러 : 이벤트가 발생하면 그에 맞는 반응을 하는 함수(처리 기술)
	
	1) 이벤트 종류
		load
		unload
		error	: js에서 오류를 만났거나 요청한 자원이 존재하지 않는 경우
		resize	: 브라우저 창 크기 조절했을 때
		scroll	: 스크롤할 때
		select	: 텍스트를 선택했을 때
	2) Keyboard 이벤트
		keydown
		keyup
		keypress
	3) Mouse 이벤트
		click
		dbclick	: 더블클릭했을 때
		mousedown : 눌렀을 때
		mouseup	    : 누르고 땠을 때
		mousemove	: 마우스 움직일 때 (touch 스크린 X)
		mouseover	: 마우스를 요소 위로 움직였을 때 (touchscreen X)
		mouseout	: 마우스를 요소 밖으로 움직였을 때 (touchscreen X)

	4) Focus 이벤트
		focus / focusin : 요소 포커스를 얻었을 때 ex) input 태그에 커서가 깜빡 거리며 포커스가 있을 때
		blur / focusout : 요소 포커스를 잃었을 때

	5) Form 이벤트
		input : input이나 textarea 등 값이 변경 가능한 요소의 값이 변경되었을 때
		chane : select, checkbox, radio 등의 상태가 변경되었을 때
		submit : form을 submit(전송)할 때 
		reset : reset버튼 눌렀을 때
	6) Clipboard 이벤트
		cut : 컨텐츠를 잘라내기 할 때
		copy : 컨텐츠 복사할 때
		paste : 컨텐츠 붙여넣기 할 때
	
	7) 이벤트 핸들러 등록
		1. 인라인 이벤트 헨들러 등록 (옛날방식, 비추)
			HTML 태그에 on으로 시작하는 속성으로 추가
			이벤트에 해당하는 개별 속성에 호출될 함수 이름
		2. 이벤트 핸들러 프로퍼티 방식
			HTML과 JS를 분리하여 작성할 수 있으나, 이벤트 핸들러 프로퍼티에 하나의 이벤트 핸들러만 바인딩할 수 있다.
		3. addEventListener 메서드 방식
