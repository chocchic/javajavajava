0.세팅
	1. 준비물 : JDK(11 환경변수), 이클립스, 톰캣 9, DBMS, SQLDeveloper, 구글 크롬 브라우저
		[ 톰캣 다운, 설치 ]
		https://tomcat.apache.org/download-90.cgi
		톰캣 사이트 > Download Tomcat 9 > zip 다운
		> 다운받은 파일 (경로 찾기 편한 위치로 C:\server(임의의 폴더 만들어서 안에 해제) ) 이동
		> 압축해제 > 끝!
	
		[ 이클립스 세팅 ]
		입축해제 > Java EE 모드로 사용
		> 인코딩 UTF-8
		* ISO-8859-1
		* KSC5607  
		* MS949 / CP949 : MS사
		* EUC-KR : ANSI 확장 
		* ANSI

		tomcat 파일의 bin 파일내에 있는 startup.bat을 실행하여 크롬에서 localhost:8080으로 확인하기
		> tomcat 홈페이지 뜨면 켜진거 아니면 cmd로 startup.bat을 실행하여 오류확인
		> 대부분 경로 문제이므로 java 깔린거나 나머지 경로 확인해주기

1. 웹과 JSP
	1) 웹 동작원리
		클라이언트 / 서버 방식으로 동작
		
		클라이언트 : 사용자(요청자), 웹 브라우저
		서버 : 서비스 제공자

		동작방식 : 
			클라이언트 --- 웹페이지 요청 request ---> 웹서버
			(브라우저) <--- 결과물로 응답 response --- (ex.톰캣) 

	2) 정적 웹페이지 / 동적 웹페이지
		정적 웹페이지 : 저장된 텍스트파일 그대로 보는 것
			html같은 웹언어로 작성
		동적 웹페이지 : 저장된 내용을 가공처리해서 보는 것
			PHP, ASP, JSP같은 웹언어로 작성
	3) 웹 주소
		URL : http:// ip : port / file경로
					uri
				         -------------
		http://192.168.10.54:8080/jsp/main.jsp?a=10&b=20	  : URL
		----
		프로토콜
		        ----------------
			ip
				  ------
				   port
				         --------------
					페이지 경로
						--------------
						쿼리스트링(파라미터)
		http://192.168.10.54:8080/jsp/main.jsp : 할당받은 ip 주소 = 내 pc
		http://127.0.0.1:8080/jsp/main.jsp	: loopback 주소 = 내 pc
		http://localhost:8080/jsp/main.jsp	: localhost는 자기자신을 가르킴 = 내 pc

		Domain --> DNS
	4) 웹 프로그래밍과 JSP
		웹 프로그래밍 : 웹 서버가 웹브라우저에 응답으로 전송할 데이터를 생성해주는 프로그램을 작성하는 것
			       클라이언트측 실행 언어와 서버측 실행 언어로 구분
		JSP(Java Server Pages) : 자바를 기반으로 하는 서버측 웹프로그래밍 언어

		처리과정 : jsp페이지는 서블릿 프로그램으로 변환되어 실행됨.
			1. 브라우저에서 hello.jsp 요청하면, 웹 서버는 jsp 확장자를 발견, 확인하여 웹서버에 있는 jsp컨테이너(jsp엔진)에 전달.
			2. jsp 컨테이너는 jsp페이지를 서블릿 프로그램인 hello_jsp.java로 변환
			3. jsp 컨테이너가 서블릿 프로그램을 컴파일하여 hello_jsp.class로 만들어 웹서버에 전달
			4. 웹 서버는 .class 실행결과를 웹브라우저에 응답으로 전달, 웹브라우저는 새로 가공된 HTML 페이지를 동적 처리한 결과 보여줌
	5) 웹 서버, 웹 컨테이너, 웹 어플리케이션 서버
		1. 웹 서버
			요청받아 응답, 자체적으로 처리 못하는 것은 컨테이너처럼 처리할 수 있는 곳응로 넘겨줌.
			정적 페이지 서비스
			아파치, IIS
		2. 웹컨테이너
			JSP와 서블릿을 실행할 수 있는 프로그램으로 서블릿 컨테이너라고도 함
		3. 웹 어플리케이션 서버 (Web Application Server : WAS)
			웹 서버와 웹 컨테이너를 결합한 서버
			동적 페이지
			톰캣, BEA의 웹로직 등

		사용자 요청(브라우저) -> 웹서버 -> 컨테이너 연산 -> 웹서버 -> 사용자 응답(브라우저)

	6) JSP 생명주기
		jsp -> .class에는 jspInit(), _jspService(), jspDestroy() 메서드등 존재함.
		
		hello.jsp --번역--> hello_jsp.java --compile--> hello_jsp.class --> jspInit() 호출 --> _jsService() 호출 ----> jspDestroy() 호출 (소멸)
		* 두번째 요청부터는 페이지 요청시 _jsService()만 실행한다. (요청 ---> 응답)

2. 웹프로젝트 생성
	1) 서버 세팅 
		반드시 프로젝트 시작 전 설정할 것
		server 탭 > 빈 공간에 마우스 우클릭 > new > server (팝업 뜸) > Apache 폴더안에 Tomcat 9 선택 후 next > Browe 선택해서 Tomcat 압축 해제한 곳(bin 폴더 등 여러 폴더가 보이는 곳까지 들어가기) > next > finish 
		* 확인 : 서버 스타트해서 console 탭에 에러 없는지 확인!
	2) 프로젝트 생성
		File > New > Dynamic Web Project
		> name : 프로젝트 이름
		   tomcat 눈으로 확인 next > next > 체크박스(프로젝트이름.xml 파일을 만들어줌) 선택하고 finish

		* 프로젝트안에 JRE System Libray [JavaSE-17]로 되어있을경우 버전 11로 변경 하기!!
			프로젝트폴더(web) 선택, 마우스 우클릭
			> properties 
			> 1) 왼쪽에 Java Build Path 선택 > 오른쪽 상단에 Libraries 탭 선택 
			> JRE System Libray [JavaSE-17] 선택하고 오른쪽 Edit 클릭 
			> 팝업에 Execution Environment : JavaSE-11(jre)로 선택하고 하단에 Apply클릭
			> 2) 왼쪽 메뉴에 Project Facets 선택 
			> 오른쪽 [v]Java     17 에서 17부분클릭하여 11로 변경
			> Apply and Close!! 		

	3) 웹프로젝트 구조
		웹서버가 준비된 상태에서 아래와 같은 폴더 구조를 갖춰야한다
		[폴더명] :프로젝트명 (Context Path, Root Context) : Web
			- [WEB - INF]
				- [lib]		: 추가할 외부 라이브러리 배치
				- [classes]	: 자바의 컴파일된 클래스 파일
				- web.xml	: 웹의 기본 설정정보를 담을 파일  
				- (jsp)
			- [META-INF]		: 설정 관련 파일을 저장하는 폴더
			- jsp / html / css / 이미지 등등 ....
	4) 프로젝트 서버에 올리고 페이지 요청해보기
		파일 위치 : webapp 폴더 바로 안에 ( WEB-INF안에 넣지 않기)
		http://localhost:8080/web/WEB-INF/jsp01.jsp
