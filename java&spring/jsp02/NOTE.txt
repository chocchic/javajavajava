[JSP 02]

페이지 에러
	404 : jsp 파일 없다 -> 파일 존재하는지 여부, URL 주소, 경로상의 오타 없는지 확인
	500 : 대부분 자바 구문 오류 -> 자바쪽 오타 확인
	-> 사용자가 보면 안되는 페이지로, '공사중' 같은 페이지 제작해서 연결해야 함.
## jsp 파일은 파일명 변경 X, 맞는 이름의 파일 새로 생성해서 내용물을 복붙하기

1. JSP 페이지 구성 요소
	디렉티브 태그 (Directive)
	스크립트 : 스크립트릿(scriptlet), 표현식(expression), 선언부(declaration)
	표현 언어 (EL expression language)
	내장 객체 (Implicit Object)
	정적인 데이터 : 일반 텍스트 등
	표준 액션 태그 (Action Tag)
	커스텀 태그(Custom Tag)와 표준 태그 라이브러리(JSTL)

1. 디렉티브 태그
	page : JSP 페이지에 대한 정보 설정
	include : JSP 페이지의 특정 영역에 다른 문서를 포함
	taglib : JSP 페이지에서 사용할 태그 라이브러리 설정
<%@ 디렉티브태그명 속성1="값1" 속성2="값2" ..%>

	1) page
		JSP 페이지 설정 정보 지정
		문서 타입, 출력버퍼크기, 에러페이지 등
		페이지 최상단에 선언 권장
		속성 다양
	2) include
		외부 파일의 내용을 포함 : 복붙 개념
		머리글, 바닥글같은 공통된 부분을 별도의 jsp파일로 만들어 모듈화시켜 include로 붙힐 때 편함
		코드 유지 보수, 재사용 가능성 향상

		<%@ include file = "파일명" %>
		주의사항! 인코딩이 동일해야 오류 안남
	3) taglib
		표현언어, JSTL, 사용자 정의태그 등 외부 태그 라이브러리를 설정하는 태그
		페이지 상단 작성
		<% taglib prefix="태그식별자" uri="외부라이브러리경로"%>

		uri : 외부 태그의 설정 정보를가진 라이브러리 경로 주소
		preifx : 태그를 식별하기 위한 고유 이름
		
		ex ) 태그 사용시
		<태그식별자:태그명 ... >

2. 스크립트 요소
	HTML 코드에 자바코드를 넣어 프로그램이 수행하는 기능 구현
	서블릿 클래스로 변환할 때, JSP 컨테이너가 자바 코드가 삽입되어 있는 스크립트 태그를 처리하고 나머지는 HTMl 코드나 일반 텍스트로 간주함

	선언부 <%! %>
	스크립트릿 <% %>
	출력문 <%= %>

3. 내장 객체 implicit object
	JSP 페이지에서 사용할 수 있도록 JSP 컨테이너에 미리 정의된 객체
	import 문 없이, 또한 객체 생성 없이 바로 사용가능
	JSP 페이지가 서블릿으로 번역될 때 JSP 컨테이너가 자동으로 내장 객체를 멤버 변수, 메서드 매개변수 등 각종 참조변수(객체)로 포함시킴
	_jspServe() 메서드에서 사용 가능
	
	1) 종류
	request 		: 웹 브라우저 HTTP 요청 정보 저장 : javax.servlet.http.HttpServletRequest
	reponse		: 웹 브라우저 HTTP 응답 정보 저장 : javax.servlet.http.HttpServletResponse
	out		: 출력 관련:  : javax.servlet.jsp.jsp.jspWriter
	session		: 웹 브라우저 정보 유지위한 세션 정보 객체 : javax.servlet.http.HttpSession
	application	: 웹 어플리케이션 컨텍스트 정보 저장 : javax.servlet.ServletContext
	pageContext	: JSP 페이지 정보 저장 : javax.sevlet.jsp.PageContext
	page		: JSP 페이지로 구현한 자바 클래스, JSP 페이지 자체를 나타냄 : java.lang.Object
	config		: JSP 페이지 설정 정보 저장 : javax.servlet.ServletConfig
	exception	: JSP 페이지 예외 발생 처리 : java.lang.Throwable

4. request 내장 객체
	브라우저에서 서버의 JSP 페이지 요청시 요청에 대한 정보를 담고 있는 객체
	
	1) 기본 기능
		클라이언트와 관련된 정보 읽기 기능
		서버와 관련된 정보 읽기 기능
		클라이언트가 전송한 요청 파라미터 읽기 기능
		클라이언트가 전송한 요청 헤더 읽기 기능
		클라이언트가 전송한 쿠키 읽기 기능
		속성(Attribute) 처리 기능

	2) 요청 파라미터 처리
		요청 파라미터의 형태는 
			form : name속성값=입력데이터
			주소창 : 이름=값&이름=값 ... 
		의 형태로 전송되며 input tag의 name속성의 값을 키로 request 객체를 이용해 전송된 값을 꺼낼 수 있다.

		# 메서드 #
		String		getParameter(String name)
				 : 이름이 name인 파라미터의 값을 리턴. 존재하지 않으면 null 리턴
		String[]		getParameterValues(String name)
				 : 이름이 name인 모든 파라미터의 값을 배열로 리턴받기. 존재하지 않으면 null 리턴
		java.util.Enumeration   getParameterNames()
				 : 전송한 파라미터의 이름 목록을 리턴
		java.util.Map	getParameterMap()
				 : 전송한 파라미터의 맵을 구함 <파라미터이름,값> 쌍으로 구성

	3) 전송 방식 : GET / POST
		# GET
			URL 경로 뒤에 물음표와 함께 파라미터를 붙혀 데이터 전송
			이를 쿼리 스트링이라고 한다. 각 파라미터는 앰퍼센드(&) 기호로 구분
			브라우저에 따라 한글은 이상한 문자로 표현 RFC 2396규약에 정의된 규칙에 따라 인코딩되어 전송
			URL 쿼리로 파라미터를 전송하므로 폼을 사용하지 않아도 데이터 전송 가능
			브라우저, 웹 서버 또는 웹 컨테이너에 따라 전송할 수 있는 파라미터와 값의 길이에 제한이 있을 수 있다.
		# POST
			URL 경로 뒤에 파라미터가 보이지 않는다
			데이터 영역을 이용하여 파라미터를 전송하여, 전송할 파라미터의 길이 제한이 없다.

	4) 요청 파라미터 인코딩

		[ 캐릭터셋 세팅 ]
		# Client <----- Server	: <%@ page 인코딩 UTF-8
		# Client -----> Server	: 다른 곳에서 처리
	
			# POST
				request.setCharacterEncoding("UTF-8");
				사용자가 보내준 파라미터 값을 꺼내기 전에 한번 먼저 실행시켜주어야 한다.
				-> jsp 처리 페이지에서 매번 작성
			# GET
				Servers > Tomcat 9 ... > server.xml > 63라인 > Connector  ... 태그에 URIEncoding = "UTF-8" 속성 추가 저장 (이클립스의 서버당 한 번만 추가해주면 계속 유지됨)

		# 파라미터 전송 방식에 따른 인코딩 결정 규칙
		<a>태그에 쿼리 문자열 추가 : 웹 페이지 인코딩 사용 <a href = "...jsp?a=10"
		Form 태그 method="get"	: 웹 페이지 인코딩 사용
		브라우저 주소에 직접 쿼리 추가 : 웹 브라우저마다 다름

5. response 내장 객체
	request와 반대 기능. 사용자의 요청을 처리한 겨롸를 브라우저로 전달하는 정보 저장 객체
	1) 기능
		리다이렉트하기
		헤더 정보 입력
	2) 리다이렉트 : 페이지 이동
		다른 페이지로 강제 이동하도록 리다이렉션  메서드 제공
		
		void sendRedirect(String url);

6. out 내장 객체
	웹 브라우저에 데이터를 전송하는 출력 스트림 객체

7. application 내부 객체
	어플리케이션과 관련된 기본 객체
	초기 설정 정보 읽기, 서버 정보 읽기, 웹 어플리케이션이 제공하는 자원 읽기 ...

	1) 웹 어플리케이션 초기화 파라미터 읽기
		# 1. 웹 어플리케이션 전체에 사용할 수 있는 초기화 파라미터 지정
			/WEB-INF/web.xml 파일에 <context-param>태그로 초기화 파라미터 지정
			* web.xml : 웹 어플리케이션을 위한 설정 정보를 담고 있는 파일
				   WEB-INF폴더 안에 위치해야함
			<context-param>
				<description>파라미터 설명(옵션) </description>
				<param-name>파라미터 이름</param-name>
				<param-value>파라미터 값</param-value>
			</context-param>
		# 메서드
		String getInitParameter(String name) : 이름이 name인 초기화 파라미터 값을 읽어옴. 없으면 null
		Enumeration<String> getInitParameterNames() : 초기화 파라미터의 이름 목록 가져오기

8. 에러 페이지 세팅
	웹 어플리케이션 실행 도중에 발생할 수 있는 오류에 대비한 예외 처리 코드를 작성하여 비 정상적인 종료를 막기 위한 세팅

	1) 웹 에러
		404 : Not Found : 요청 경로 오류
		500 : Internal Server Error : 요청 페이지의 로직 오류(자바쪽에서 문제 생겼을 때)

		[2xx] : Success 성공 관련 코드
			200 : 성공, 서버가 요청한 페이지를 잘 처리(제공)했다
		[3xx] : Redirect 이동 관련 코드
		[4xx] : Client Error 관련 코드
			400 : Bad Request : 요청이 이상함. 입력란에 이상한 데이터나 JSON이 와야하는데 엉뚱하게 온 경우
			405 : Method Not Allowed 해당 메서드 안됨. 허용되지 않음
		[5xx] : Server Error 관련 코드
			503 : Service Unavailable : 서비스 지원 불가. 웹 서버는 살아있는데 DB서버가 죽었다던가 ...

	2) 예외 처리 방법 (에러 페이지로 이동)

		- try/catch/finally : 자바 언어의 예외처리 구문 이용
		- page 디렉티브 태그 이용한 예외처리
		- web.xml 파일을 이용한 예외 처리

		# web.xml
		<error-page>
			<error-code></error-code> 또는 <exception-type> ... </exception-type>
			<location>에러 발생시 띄위줄 페이지 경로</location>
		</error-page>

* 실습
본인이 만든 회원가입 폼 페이지 jsp로 옮겨오고, pro페이지 만들어서 데이터 뽑아서 화면에 출력
